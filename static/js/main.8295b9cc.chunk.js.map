{"version":3,"sources":["components/ItemX.js","App.js","reportWebVitals.js","index.js"],"names":["ItemX","id","item","onCheck","onClick","App","useState","input","setInput","items","setItems","removeItem","prevData","filter","index","className","type","value","onChange","event","target","map","bg","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAceA,MAZf,YAAuC,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACvB,OACI,mCACA,oBACIC,QAAS,WAAOD,EAAQF,IAD5B,SAGKC,O,OCkDEG,MArDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAEJG,EAFI,KAEGC,EAFH,KAcX,SAASC,EAAWV,GAChBS,GAAS,SAAAE,GACL,OAAOA,EAASC,QAAO,SAACX,EAAMY,GAC1B,OAAOA,IAAUb,QAK7B,OACE,sBAAKc,UAAU,aAAf,UACI,qBAAKA,UAAU,UAAf,SACI,oBAAIA,UAAU,QAAd,qBAEA,uBACIC,KAAK,OACLC,MAAOV,EACPW,SAAU,SAACC,GAAWX,EAASW,EAAMC,OAAOH,UAEhD,+BAAM,wBAAQb,QA5BxB,SAAiBe,GACF,KAARZ,IACHG,GAAS,SAAAE,GACL,MAAM,GAAN,mBAAWA,GAAX,CAAqBL,OAGzBC,EAAS,MAsBG,mBAEV,qBAAKO,UAAU,QAAf,SACE,6BACKN,EAAMY,KAAI,SAACnB,EAAMY,GAAP,OACP,cAAC,EAAD,CAEIb,GAAIa,EACJZ,KAAMA,EACNC,QAASQ,GAHJG,UAQnB,cAAC,IAAD,CAAaE,KAAK,SAASM,IAAI,EAAMC,MAAM,gBCvCtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8295b9cc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ItemX({ id, item, onCheck }) {\n    return (\n        <>\n        <li\n            onClick={() => {onCheck(id)}}\n        >\n            {item}  \n        </li>\n        </>\n    )\n}\n\nexport default ItemX;","import React, { useState } from 'react';\nimport './App.css';\nimport ItemX from './components/ItemX';\nimport ParticlesBg from 'particles-bg'\n\nfunction App() {\n    const [input, setInput] = useState(\"\");\n    const [items, setItems] = useState([]);\n\n    function addItem(event) {\n        if(input!==\"\"){\n        setItems(prevData => {\n            return [...prevData, input];\n        });\n        \n        setInput(\"\");\n    }\n}\n\n    function removeItem(id) {\n        setItems(prevData => {\n            return prevData.filter((item, index) => {\n                return index !== id;\n            })\n        });\n    }\n\n    return (\n      <div className=\"to-do-list\">\n          <div className=\"heading\">\n              <h1 className=\"title\">To-do</h1>\n          </div>\n              <input\n                  type=\"text\"\n                  value={input}\n                  onChange={(event) => {setInput(event.target.value)}}\n              />\n              <span><button onClick={addItem}>Add</button></span>\n\n          <div className=\"items\">\n            <ul>\n                {items.map((item, index) => (\n                    <ItemX\n                        key={index}\n                        id={index}\n                        item={item}\n                        onCheck={removeItem}\n                    />\n                ))}\n            </ul>\n          </div>\n          <ParticlesBg type=\"square\" bg={true} color=\"#494a4b\"/>\n\n      </div>\n      \n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}